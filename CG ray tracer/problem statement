CAP 5705 – Homework 1
Due September 22, 2012
Start Early!
First-Hit Ray Tracer
In this homework you will write a simple ray tracer to render a scene composed of two spheres and
a tetrahedron. The two spheres are of different radii and colors (e.g., blue and green). Pick the
centers and the radii of the spheres so that they do not intersect in the 3-D space.
For simplicity, you may assume a directional light and a parallel camera geometry for rendering
purposes. This means that a single LookAt vector can be used to generate all rays. For example,
you may set the LightDir = (0, 1, 0) and LookAt = (0, 0, −1).
• Write a simple OpenGL program to display an image. Fix the window size (e.g., 256 × 256).
You may use the glDrawPixels function to draw the contents of an array of RGB values.
Verify the correctness of your program by displaying a test image that you generate (e.g., color
stripes). 10pts
• Generate parallel rays and solve the ray-object intersection problems to determine the color
of each pixel. Verify the correctness of your ray tracer by rendering the scene from multiple
angles (e.g., change the LookAt vector). 20pts
• Add ambient, diffuse and specular shading to your ray tracer. Pick the ambient, diffuse and
specular constants and light intensities to reflect a realistic rendering of the scene. 20pts
• Add a glazed surface to the scene. You may choose to set one of the objects in the scene or
have a plane below these objects that appears as a glazed surface. 20pts
• Create a small animation by changing the LookAt vector and assembling the rendered images
into a movie. 10pts
• Along with the source code and makefile, submit a report (a PDF file) that describes and
documents your experiments for each step of the homework. 20pts
1
Programming with OpenGL (GLUT)
This homework only requires a basic OpenGL program to display an image rendered by your ray
tracer. Therefore, you may start with an example GLUT program and adjust its display method
to use glDrawPixels to display the content of the ray traced image.
OpenGL is a standard API for writing 2-D and 3-D graphics applications. You can get an
overview about OpenGL from various sources such as the “OpenGL Programming Guide” by Woo,
Neider and Davis (Addison Wesley). There are numerous online resources1 and tutorials2
.
GLUT3
is an OpenGL utility toolkit that you can use to work with OpenGL a little easier.
GLUT is freely available in common platforms. FreeGLUT4
is an open source alternative to GLUT
which is better maintained.
Submission Guidelines
Submit to E-learning site a single file as a .zip or a .tar.gz bundle that contains all the files to be
submitted. Include the source codes for your programs in the submission bundle. Please include a
‘README’ file that clearly explains how to run and test the program. Also include a ‘Makefile’ that
compiles and links the program from the source files. Please make sure your program compiles/runs
in the CISE linux machines.
Late submissions are penalized by 20% of the grade for each day past the due date.
1http://en.wikipedia.org/wiki/OpenGL
2http://nehe.gamedev.net/
3http://www.opengl.org/resources/libraries/glut/
4http://freeglut.sourceforge.net/
2
